正规API
======
2018年2月 Bangumi 开放开发平台和[正式API](https://github.com/bangumi/api)

本文档不再进行维护，请按照官方给出的方法正确使用正规API

自解析Bangumi API
======
该文档不是一个定义性文档！不保证准确，很多是猜的。

网站静态API
------
1. 设置关注
[POST] http://bangumi.tv/subject/{$ID}/interest/update
	{$ID} = 番组ID
	
	[POST信息]
	referer: "subject"
	interest: 
		1 = 想看
		2 = 看过
		3 = 在看
		4 = 搁置
		5 = 抛弃
	rating: 1 - 10
	tags: (string)
		以空格分隔的字符串，每一个代表一个TAG
	comment: (string)
		一段文字评论该番
		
2. 设置进度
[POST] http://bangumi.tv/subject/set/watched/{$ID}
	{$ID} = 番组ID
	
	[POST信息]
	referer: "subject"
	watchedeps: (int)
		数字，观看的集数
		
4. 认证 API
[COOKIE]
	chii_sid: (optional) 会话ID
	chii_auth: {$AUTH_TOKEN}
	chii_cookietime: (optional) 多长时间后需要重新申请Cookie，毫秒计时？
	
	
拆解onAir得到的API
----
[注意！] 根地址：api.bgm.tv

！新年福利！
0.请求的一些未知附加参数
这些参数适用于所有对此API的HTTP请求。标注（Optional）的如果不使用也不会影响成功的请求。
	[HTTP头]
	Referer: app:/onAir.swf (Optional)
	
	[HTTP Cookie]
	chii_sid: session ID，每次请求后会有set-cookie字段给出
	__cfduid: 未知，不影响请求，auth后会得到
	
	[HTTP GET]
	rand={随机数} (Optional)

1.认证API:
每个认证的请求中必须传递这些参数！
[GET字段]
	sysusername={$UID} (Optional)
	sysuid={$UID} (Optional)
	source={$APP_NAME} 
	auth={$AUTH_TOKEN}
	
	{$UID} = 番组计划的UID，个人空间显示的数字
	{$APP_NAME} = 你的App的一个标识，貌似现在BGM只有 onAir不过其他的字符串也不会导致出错
	{$AUTH_TOKEN} = 认证标签

注意，source现在是必选项了，而且有一些条目需要强制 source 是 onAir，下面会有说明。

2.获取认证：
[POST] /auth
	[POST信息]
	password: 密码
	username: 用户名
	(opt) source: {$APP_NAME}
	auth: 0
	sysuid: 0
	sysusername: 0
	
	[返回信息]
	格式：JSON
	{
		id: 用户UID
		url: 用户空间URL
		username: 还是用户UID（尼玛
		nickname: 用户昵称
		avatar:{
			large: 头像、大
			medium: 头像、中
			small: 头像、小
		}
		sign: 签名
		auth: 颁发的 {$AUTH_TOKEN}
		auth_encode: urlencode之后的 {$AUTH_TOKEN} （呃。。。
	}
	
3.获取目前追番信息：
!(需要认证信息
[GET] /user/{$UID/USERNAME}/collection?cat=watching
	获取时需要提供cat字段，目前理解为追番信息的分类，这个字段现在填写任何非空字符串都会给出同样的结果
	默认客户端采用 "watching" 暂时是API断头。
	
	此处使用{$USERNAME}也能正确返回信息
	
	[返回信息]
	格式：JSON
	[
		{
			name: 番剧名称
			ep_status: 追番集数
			lasttouch: 上次更新时间
			subject: {
				id: 番剧ID （本文档中以 {$ID} 表示）
				url: 链接到番剧的URL
				type: 番剧类型（2=二次元番？）
				name: 番剧名称（日文たぶん）
				name_cn: 番剧汉化名（可能与name同）
				summary: 番剧介绍
				eps: 集数
				air_date: 放映开始日期
				air_weekday: 放映日（周）
					1 周一
					2 周二
					3 周三
					4 周四
					5 周五
					6 周六
					7 周日
				images: {
					large,common,medium,small,grid （不同大小的缩略图URL）
				}
				collection: {
					wish: 想要看的人数
					collect: 看过的人数
					doing: 正在看的人数
					on_hold: 搁置人数
					dropped: 弃番人数
				}
			}
		}
	]

4. 获取追番进度信息
!(需要认证信息
获取某一个番所有集数的信息，以及用户的追番信息。
[GET] /user/{$UID}/progress?subject_id={$ID}&source=onAir
	{$UID} = 用户ID
	{$ID} = 番组ID
	{$APP_NAME} = onAir ！注意此处必须使用onAir否则会返回 Unauthorized 错误！
	
	[返回信息]
	格式：JSON
	{
		subject_id: 番组ID 同 {$ID}
		eps: [
			{
				id: 本集ID
				status: {
					id: 状态 ID 
						1 = 想看
						2 = 看过
						3 = 在看
						4 = 搁置
						5 = 抛弃
					css_name: 网站CSS标签名称 2-> Watched
					url_name: 网站URL内显示的名称 2-> watched
					cn_name: 中文字符串（见上面数字、字符串对应表）
				}
			}
		]
	}
	
5.获取番组/专题信息
[GET] /subject/{$ID}?responseGroup={$RGP}
	{$ID} = 番组ID，见上面
	{$RGP} = 返回详细程度
		"simple" : (Default) 比较简略
		"large" : 详细

	[返回信息]
	格式： JSON
	{
		id: 番组ID {$ID}
		url: 番组URL
		type: 专题类型
			1 漫画/小说
			2 动画/二次元番
			3 音乐
			4 游戏
			6 三次元番
		summary: 简介
		name: 名称（原）
		name_cn: 名称（中）
		eps:
			在 {$RGP} = simple 的时候返回
				count: 集数的总计，在 {$RGP} = simple 的时候返回
			在 {$RGP} = large 的时候返回
				[
					{
						id: 集ID
						url: 集URL
						type: 类型（目前只见到过0）
						sort: 集编号（序号，对应第N集，以1开始）
						name: 该集名称（原）
						name_cn: 该集名称（中）
						duration: 时长（字符串，格式：MM:ss）
						airdate: 放送日
						comment: 评论数
						desc: 介绍
						status: 放映状况
							Air - 已放送
							NA - 未放送
							Today - 正在放送
					}
				]
		air_date: 首映日期
		air_weekday: 放映日（见上 1-7为周一-周日）
		images: { large,common,medium,small,grid : 缩略图URI }
		collection: { wish,collect,doing,on_hold,dropped : 收集信息（见上3）}
		crt: 
			在 {$RGP} = simple 的时候返回
				undefined: {$RGP} = simple 时不返回此字段
			在 {$RGP} = large 的时候返回
				[
					{
						id: 角色词条ID
						url: 角色URL
						name: 角色姓名
						name_cn: 角色姓名（汉化）
						role_name: 角色类型字符串（主角、配角等等）
						images: { large,medium,grid,small : 缩略图 }
						comment: 评论数目
						collects: 收藏人数
						info: {
							name_cn: 角色姓名（汉化）
							alias: {
								kana: 别名（假名）
							}
							gender: 性别（男，女）
							bloodtype,height,weight,bwh: 血型、身高、体重、三围
							source: 信息来源
						}
						actors: [
							{
								id: （配音）演员ID
								url: （配音）演员资料URL
								name: （配音）演员姓名
								images: { large,medium,small,grid : 缩略图}
							}
						]
					}
				]
		staff:
			在 {$RGP} = simple 的时候返回
				undefined: {$RGP} = simple 时不返回此字段
			在 {$RGP} = large 的时候返回
				[
					{
						id: 制作者ID
						url: 制作者资料页
						name: 制作者名称
						name_cn: 中文的名称
						role_name: 扮演的制作团队角色
						images: { 缩略图 }
						comment: 评论数目
						collects: 收藏数目
						info: {
							参考CRT的 INFO 区域
						}
						jobs: [
							"原作","监督" 。。。等等
						]
					}
				]
		topic:
			在 {$RGP} = simple 的时候返回
				undefined: {$RGP} = simple 时不返回此字段
			在 {$RGP} = large 的时候返回
				[
					{
						id: 讨论板主题ID
						url: 讨论板主题URL
						main_id: 讨论板ID
						timestamp: 时间
						lastpost: 最后回复时间
						replies: 回复数量
						user: { id,url,username,nickname,avatar,sign : 发帖用户数据，参考/auth返回 }
					}
				]
		blog:
			在 {$RGP} = simple 的时候返回
				undefined: {$RGP} = simple 时不返回此字段
			在 {$RGP} = large 的时候返回
				[
					{
						id: 博客文ID
						url: 文章URL
						title: 文章标题
						summary: 文章简介
						image: { 缩略图 }
						replies: 回复数
						timestamp: 发帖时间
						dateline: 日期 Y-m-d H:i 格式
						user: { id,url,username,nickname,avatar,sign : 用户数据 }
					}
				]
	}
	
6. 获取收藏信息
[GET] /collection/{$ID}?source=onAir
	{$ID} = 番组ID
	{$APP_NAME} = onAir ！注意此处必须使用onAir否则会返回 Unauthorized 错误！
	
	[返回信息]
	格式：JSON
	{
		status: {
			id: 整个番组的观看状态
				1 = 想看
				2 = 看过
				3 = 在看
				4 = 搁置
				5 = 抛弃
			type: 文字描述
				do = 在看
				on_hold = 搁置
				dropped = 弃番
				wish = 想看
				collect = 看过
			name: 中文汉字描述
		}
		rating: 用户评分 1-10
		comment: 用户评价
		tag: ["",""... : 标签字符串数组 ]
		ep_status: 最后观看到的集数序号（注意是序号，不是ID）
		lasttouch: 最后更改时间
		user: {
			id, url, username, nickname, avatar sign: 见 /auth 部分
		}
	}
	
7. 根据名称搜索词条
[GET] /search/subject/{$QUERY}?responseGroup={$RGP}&max_results={$LIMIT_END}&start={$LIMIT_START}
	{$QUERY} = 搜索的字符串
	{$RGP} = 参考 /subject/{$ID}
	{$LIMIT_END} = 最后一条记录的位置
	{$LIMIT_START} = 第一条记录的位置（这两个用于分页），一次区间建议不要超过20
	
	[返回信息]
	格式：JSON
	{
		results: 返回结果的实际数量
		list:[
			{
				里面内容同 /subject/{$ID} 返回的Object
				根据 {$RGP} 不同，详细程度也不同
			}
		]
	}

8. 获取消息数量
!(需要认证信息
[GET] /notify/count

	[返回信息]
	格式：JSON
	{
		count: 你的信消息提醒数目
	}

9. 设置收藏信息
[POST] /collection/{$ID}/update
	[POST信息]
		认证头
			auth
			sysuid (opt)
			sysusername (opt)
			source (opt)
		rating: 新的评分
		status: 追番状态，同查询时的字段
			do = 在看
			on_hold = 搁置
			dropped = 弃番
			wish = 想看
			collect = 看过

10. 设置追番进度
[POST] /ep/{$EPID}/status/{$STATUS_URL}?source=onAir
	{$EPID} = 该集的 ID，在 collection 和 subject 下都可查询
	{$STATUS_URL} = 状态URL后缀，
		watched = 看过
		drop = 弃番
		queue = 想看
	{$APP_NAME} = onAir ！注意此处必须使用onAir否则会返回 Unauthorized 错误！
		
	[POST信息]
		认证头
			auth
			sysuid (opt)
			sysusername (opt)
			source (opt)
		ep_id: 一个以逗号分割的Episode ID列表
			注意，只有在 watched 设定时才给出这个列表，否则无需给出
		
	[返回信息]
	格式：JSON
	{
		request: 请求的URL
		code: HTTP返回代码，200为成功
		error: 错误的描述，没错误的话是 "OK"
	}

11. 每周放送列表
[GET] /calendar

	[返回信息]
	格式：JSON
	[
		{
			weekday: {
				cn: 中文星期名 [ 星期一 ... 星期日 ]
				en: 英语星期名 [ Mon ... Sun ]
				id: 1-7 对应周一到周日
				jp: 日语星期名 [ 月曜日 ... 日曜日 ]
			}
			items : [
				{
					air_date, air_weekday, collection, eps, images, name, name_cn, type, url: 
						参考(5)获取番组信息在{$RGP=simple}时得到的结果。
						注意：即便对这个API给出responseGroup={$RGP}参数，仍然无法诱发获取 {$RGP=large} 的 subject 结果
						目前还有观察到 type, summary 等一些字段有时无法正确返回，使用者最好先行检查
				}
			]
		}
		...一共7个条目对应每个日期...
	]
